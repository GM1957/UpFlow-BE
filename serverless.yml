service: upflow-be
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: ${opt:region, 'us-west-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    REGION: ${self:provider.region}
    SERVICE_NAME: "${self:service}-${self:provider.stage}"
    STAGE: "${self:provider.stage, dev}"
    COGNITO_USER_POOL_CLIENT: 
      Ref: CognitoUserPoolClient
    KEYS_URL: !Join ['', ['https://cognito-idp.', '${opt:region, self:provider.region}', '.amazonaws.com/', !Ref CognitoUserPool, '/.well-known/jwks.json']]
    REDIRECT_API:
      {
        "Fn::Join":
          [
            "",
            [
              "https://",
              { "Ref": "ApiGatewayRestApi" },
              ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}",
            ],
          ],
      }
    REDIRECT_URL_AFTER_AUTHENTICATION: ${self:custom.REDIRECT_URL_AFTER_AUTHENTICATION.${opt:stage, dev}}
    s3MainBucket: ${self:custom.s3MainBucket}
  iamRoleStatements: ${file(./Resources/LambdaRole.yml)}

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  userPoolName: "${self:service}-${self:provider.stage}"
  userPoolClientName: "${self:service}-user-pool-client-${self:provider.stage}"  
  REDIRECT_URL_AFTER_AUTHENTICATION:
    dev: "http://localhost:3000/"
    prod: "https://upflow.devrook.com/"

  s3MainBucket: "${self:provider.stage}-${self:service}-main-bucket"

functions:
  CognitoTriggers: ${file(./Resources/LambdaResources/CognitoTriggers.yml)}
  Users: ${file(./Resources/LambdaResources/Users.yml)}
  Projects: ${file(./Resources/LambdaResources/Projects.yml)}
  S3upload: ${file(./Resources/LambdaResources/S3upload.yml)}

resources:
  Resources:
    CognitoUserPool: ${file(./Resources/CognitoUserPool.yml)}
    CognitoUserPoolClient: ${file(./Resources/CognitoUserPoolClient.yml)}
    CognitoUserPooldomain: ${file(./Resources/CognitoUserPooldomain.yml)}
    CognitoIdentityPool: ${file(./Resources/CognitoIdentityPool.yml)}
    CognitoUnAuthorizedRole: ${file(./Resources/CognitoUnAuthorizedRole.yml)}
    CognitoAuthorizedRole: ${file(./Resources/CognitoAuthorizedRole.yml)}
    IdentityPoolRoleMapping: ${file(./Resources/IdentityPoolRoleMapping.yml)}
  
    # >>>>>>>>>>--S3 BUCKETS--<<<<<<<<<<< #
    S3MainBucket: ${file(./Resources/S3MainBucket.yml)} 
    S3MainBucketPolicy: ${file(./Resources/S3MainBucketPolicy.yml)} 

    # >>>>>>>>>>--DYNAMO DB TABLES--<<<<<<<<<<< #
    UsersTable: ${file(./Resources/DynamoResources/UsersTable.yml)}
    ProjectsTable: ${file(./Resources/DynamoResources/ProjectsTable.yml)}

  Outputs:
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
    CognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    IdentityPoolId:
      Value: 
        Ref: CognitoIdentityPool           